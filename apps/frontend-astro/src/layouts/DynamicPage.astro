---
import { arrayIncludes, objectKeys } from "ts-extras";
import type { AstroPage } from "../pages/[lang]/[...slug].astro";
import { markdownToHtml } from "../utils/markdownToHtml";
import Blank from "./Blank.astro";
import Default from "./Default.astro";
import { ogImage } from "@reunmedia/astro-og-images";
import dynamicPageOgTemplate from "../ogImageTemplates/dynamicPageOgTemplate.ts";

interface Props {
  astroPage: AstroPage;
}

const { astroPage } = Astro.props;

const contentHtml = await markdownToHtml(astroPage.content);

const layouts = { Blank, Default };

const Layout =
  // TODO - There might be a better type guard, but this works for now.
  arrayIncludes(objectKeys(layouts), astroPage.layout)
    ? layouts[astroPage.layout]
    : layouts.Default;

const ogImageUrl = await ogImage(
  dynamicPageOgTemplate({
    title: astroPage.openGraphTitle,
    description: astroPage.openGraphDescription,
  }),
);
---

<Layout
  localizedPaths={astroPage.localizedPaths}
  seo={{
    title: astroPage.title,
    description: astroPage.metaDescription,
    openGraph: {
      basic: {
        title: astroPage.openGraphTitle,
        image: ogImageUrl,
      },
      optional: {
        description: astroPage.openGraphDescription,
      },
      image: {
        // TODO - These shouldn't be hardcoded, but rather inferred from the
        // computed options of OG image.
        height: 627,
        width: 1200,
      },
    },
  }}
>
  <div class="prose-content prose">
    <Fragment set:html={contentHtml} />
  </div>
</Layout>
