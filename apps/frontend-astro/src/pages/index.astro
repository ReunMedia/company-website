---
/**
 * This page detects visitor's browser's preferred language and redirects to
 * appropriate language index.
 */

import Blank from "../layouts/Blank.astro";
import LogomarkLoadingAnimatedSvg from "../assets/logomark-loading-animated.svg?raw";
import { getRelativeLocaleUrlList } from "astro:i18n";
import { graphql } from "../graphql/generated";
import { client } from "../graphql/urql";
import type { JsonFields } from "../components/TheFooter.astro";
import { uniq } from "es-toolkit";
import { i18n } from "astro:config/client";

const locales = getRelativeLocaleUrlList().map((x) => x.replaceAll("/", ""));
const defaultLocale = i18n?.defaultLocale;
const delay = 3;
const url = `/${defaultLocale}/`;

/**
 * Social media verification links.
 *
 * Contains all social media link URLs from all languages defined in Global
 * Options that have `rel=me` set to them. These links are then added as
 * `<link>` tags to `<head>`. This is primarily done for Mastodon verification.
 */
const socialMediaVerificationLinks = await (async () => {
  const indexPageQuery = graphql(`
    query indexPageQuery {
      globalOptions {
        translations {
          socialMediaLinks
        }
      }
    }
  `);
  const { data, error } = (await client?.query(indexPageQuery, {})) ?? {};

  // GraphQL error should prevent building the site
  if (error) {
    throw error;
  }

  // Get all social media links from all translations flattened to a single
  // array.
  const socialMediaLinks = (data?.globalOptions?.translations
    ?.map((x) => x?.socialMediaLinks)
    .flat() ?? []) as JsonFields["socialMediaLinks"];

  // Get all URLs with `rel=me` while removing duplicates.
  const uniqueUrlsWithRelMe = uniq(
    socialMediaLinks
      // Filter only links with URL and `rel=me`
      ?.filter((x) => x.linkTarget && x.rel === "me")
      // Get URLs from links with `rel=me`
      .map((x) => x.linkTarget) ?? [],
  );

  return uniqueUrlsWithRelMe;
})();
---

<Blank>
  <Fragment slot="additional-head">
    <meta http-equiv="refresh" content={`${delay};url=${url}`} />
    <link rel="alternate" href={Astro.site} hreflang="x-default" />
    {socialMediaVerificationLinks.map((x) => <link rel="me" href={x} />)}
  </Fragment>

  <div
    data-index-redirect={JSON.stringify({ locales, delay, defaultLocale })}
    class="flex flex-col h-dvh w-dvw items-center justify-center transition-opacity duration-300"
  >
    <div class="h-full"></div>
    <div class="w-full max-w-40">
      <a href={url} aria-labelledby="fallback-link">
        <Fragment set:html={LogomarkLoadingAnimatedSvg} />
      </a>
    </div>
    <div class="h-full">
      <p class="text-center my-4 text-lg font-display text-theme-secondary">
        Entering<br /><a
          class="text-theme-primary"
          href={url}
          aria-labelledby="fallback-link">Reun Media</a
        >
      </p>
    </div>
  </div>
  <a
    id="fallback-link"
    href={url}
    class="absolute bottom-16 w-full mx-auto transition-opacity duration-1000 opacity-0 text-center text-xs font-light underline"
    aria-label="Enter Reun Media home page"
  >
    Click here if you're not redirected automatically
  </a>
</Blank>

<script>
  // Client-side JS preferred language redirect

  const wrapperEl = document.querySelector<HTMLDivElement>(
    "div[data-index-redirect]",
  );

  // Get frontmatter data
  const { locales, delay, defaultLocale } =
    JSON.parse(wrapperEl?.dataset.indexRedirect ?? "{}") ?? {};

  // Get elements that are changed dynamically
  const metaEl = document.querySelector('meta[http-equiv="refresh"]');
  const anchorEls = document.querySelectorAll("a");

  // Check if current browser language matches any of the available locales and
  // select the most preferred one or fallback to default locale.
  const regex = new RegExp("^(" + locales.join("|") + ")");
  const lang = regex.exec(navigator.language)?.[0] ?? defaultLocale;
  if (lang && wrapperEl) {
    // Dynamically update attributes to the preferred language
    const newUrl = `/${lang}/`;
    metaEl?.setAttribute("content", `${delay};url=${newUrl}`);
    [...anchorEls].map((el) => el?.setAttribute("href", newUrl));

    // Fade out loader before redirect
    setTimeout(() => (wrapperEl.style.opacity = "0"), 2700);

    // Just in case the redirect doesn't trigger, fade in a fallback link that
    // can be used to enter the site.
    setTimeout(() => {
      const aEl = document.getElementById("fallback-link");
      if (aEl) {
        requestAnimationFrame(() => (aEl.style.opacity = "1"));
      }
    }, 3500);
  }
</script>
